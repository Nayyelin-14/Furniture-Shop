select	မိမိလိုချင်တဲ့ field တွေကိုသာ ထုတ်ယူဖတ်ချင်တဲ့အခါသုံးတယ်
include	အဲ့ဒီ relationship (ဆက်စပ် data) ထဲက field အားလုံး ကို ဖတ်ချင်တဲ့အခါသုံးတယ်

set original image first to images folder
and then set optimized images with queue to optimized images folder 

1️⃣	BullMQ queue "cache-invalidation" ထဲမှာ job တစ်ခုလာတယ် (pattern: "user:*")
2️⃣	cacheWorker က အလုပ်လုပ်ပြီး invalidateCache("user:*") ကိုခေါ်တယ်
3️⃣	Redis scanStream() သုံးပြီး "user:*" နဲ့ကိုက်တဲ့ keys တွေကို batch-wise ရှာတယ်
4️⃣	keys တွေကို pipeline.del(key) နဲ့ တစ်ခုချင်းစီဖျက်ဖို့ စီမံတယ်
5️⃣	keys အကုန်ရှာပြီးရင် pipeline.exec() နဲ့ တစ်ခါတည်း Redis ကို delete command ပေးတယ်
6️⃣	completed မှာ “Job completed” log တင်တယ်၊ error တက်ရင် failed log

🧠 သတိပြုရန်
scanStream() ဟာ while မလိုအပ်ဘဲ async loop လုပ်ပေးတယ်။

Redis large dataset တွေကို memory-efficient ပဲရှာတယ်။

pipeline က Redis server ကို load လျော့စေတယ် (batch update/delete).

BullMQ Worker က job တစ်ခုချင်းစီကို thread pool လိုသုံးနိုင်တဲ့ system.

 In Prisma, when you're creating a related record (like Image[] under Product), Prisma needs to know how you want to handle the relation:

 create: create new related records

 connect: link to existing records

 connectOrCreate: either connect to existing or create if not found

 update: update existing related records


set: [] ဆိုတာဟာ junction table ထဲမှာ ရှိနေတဲ့ old relationships တွေကို unlink လုပ်တယ်။

သက်ဆိုင်ရာ Tag တကယ် delete မလုပ်ဘူး၊ ချိတ်ထားမှုသာဖျက်တယ်။

ဒါကြောင့် productTags (many-to-many) မှာသုံးလို့ရတယ်။

🔴 set ကို images (one-to-many) မှာမသုံးရတဲ့အကြောင်း

productDataToCreate.images = {
  set: [],  ❌ INVALID in one-to-many
};
set ကို one-to-many တွေမှာ မသုံးနိုင်ပါဘူး။

ဘာလို့လဲဆိုတော့:

One-to-many တွင် relationship သည် foreign key တစ်ခုအပေါ်တွင် မူတည်တယ်။

မင်းဟာ Product ထဲက images တွေကို ဖျက်ချင်တာမို့ set မဟုတ်ဘဲ ဖျက်ရမယ်။

ဒါကြောင့် deleteMany သုံးတယ်။

 // "prisma": {
  //   "seed": "ts-node prisma/seed.ts"
  // }

  Page	    lastCursor	    Fetched IDs	        Shown Items	      New Cursor
  1	        undefined	      [13,12,11,10,9,8]	  [13,12,11,10,9]	      9
  2	           9	            [8,7,6,5,4,3]	    [8,7,6,5,4]	        4
  3	           4	              [3,2,1]	          [3,2,1]	         null

  user has many products 
  prodcuts has many fav by many users

  many to many  == > need pivot table ,but  if there is no extra data , use explicit  many to many , no need to build pivot table